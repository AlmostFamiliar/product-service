/* tslint:disable */
/* eslint-disable */
/**
 * Product Service API
 * This service manages products in categories and offers the necessary CRUD operationsproducts in categories and offers the necessary CRUD operations.  Currencies get converted against the fixer.io api. 
 *
 * The version of the OpenAPI document: v0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface CategoryResponse
 */
export interface CategoryResponse {
    /**
     * 
     * @type {number}
     * @memberof CategoryResponse
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof CategoryResponse
     */
    name?: string;
    /**
     * 
     * @type {Set<CategoryResponse>}
     * @memberof CategoryResponse
     */
    children?: Set<CategoryResponse>;
}
/**
 * 
 * @export
 * @interface CreateCategoryRequest
 */
export interface CreateCategoryRequest {
    /**
     * Name of the category to be created
     * @type {string}
     * @memberof CreateCategoryRequest
     */
    name: string;
    /**
     * ID of the parent category. If not provided a root category will be created.
     * @type {number}
     * @memberof CreateCategoryRequest
     */
    parentId?: number;
}
/**
 * 
 * @export
 * @interface CreateProductRequest
 */
export interface CreateProductRequest {
    /**
     * Name of the product
     * @type {string}
     * @memberof CreateProductRequest
     */
    name: string;
    /**
     * Description of the product
     * @type {string}
     * @memberof CreateProductRequest
     */
    description: string;
    /**
     * Price of the product
     * @type {number}
     * @memberof CreateProductRequest
     */
    price: number;
    /**
     * Currency of the price. If no value is provided euro will be assumed. If a value is provided the price will be coverted to euro and saved in the database.
     * @type {string}
     * @memberof CreateProductRequest
     */
    currency: string;
    /**
     * 
     * @type {Array<number>}
     * @memberof CreateProductRequest
     */
    categories: Array<number>;
}
/**
 * 
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     * Timestamp in ISO-Format
     * @type {string}
     * @memberof ErrorResponse
     */
    timestamp: string;
    /**
     * HTTP Status
     * @type {number}
     * @memberof ErrorResponse
     */
    status: number;
    /**
     * Error that was thrown
     * @type {string}
     * @memberof ErrorResponse
     */
    error: string;
    /**
     * Descriptive error message
     * @type {string}
     * @memberof ErrorResponse
     */
    message: string;
    /**
     * request path that was called
     * @type {string}
     * @memberof ErrorResponse
     */
    path: string;
}
/**
 * 
 * @export
 * @interface MoneyResponse
 */
export interface MoneyResponse {
    /**
     * 
     * @type {number}
     * @memberof MoneyResponse
     */
    amount?: number;
    /**
     * 
     * @type {string}
     * @memberof MoneyResponse
     */
    currency?: string;
}
/**
 * 
 * @export
 * @interface ProductResponse
 */
export interface ProductResponse {
    /**
     * 
     * @type {number}
     * @memberof ProductResponse
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductResponse
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductResponse
     */
    description?: string;
    /**
     * 
     * @type {MoneyResponse}
     * @memberof ProductResponse
     */
    price?: MoneyResponse;
    /**
     * 
     * @type {Array<CategoryResponse>}
     * @memberof ProductResponse
     */
    categories?: Array<CategoryResponse>;
}
/**
 * 
 * @export
 * @interface UpdateCategoryRequest
 */
export interface UpdateCategoryRequest {
    /**
     * ID of the category
     * @type {number}
     * @memberof UpdateCategoryRequest
     */
    id: number;
    /**
     * Name of the category
     * @type {string}
     * @memberof UpdateCategoryRequest
     */
    name: string;
    /**
     * ID of the parent category
     * @type {number}
     * @memberof UpdateCategoryRequest
     */
    parentId?: number;
}
/**
 * 
 * @export
 * @interface UpdateProductRequest
 */
export interface UpdateProductRequest {
    /**
     * ID of the product
     * @type {number}
     * @memberof UpdateProductRequest
     */
    id: number;
    /**
     * Name of the product
     * @type {string}
     * @memberof UpdateProductRequest
     */
    name: string;
    /**
     * Description of the product
     * @type {string}
     * @memberof UpdateProductRequest
     */
    description: string;
    /**
     * Price of the product
     * @type {number}
     * @memberof UpdateProductRequest
     */
    price: number;
    /**
     * Currency of the price. If no value is provided euro will be assumed. If a value is provided the price will be coverted to euro and saved in the database.
     * @type {string}
     * @memberof UpdateProductRequest
     */
    currency: string;
    /**
     * 
     * @type {Array<number>}
     * @memberof UpdateProductRequest
     */
    categories: Array<number>;
}

/**
 * CategoryApi - axios parameter creator
 * @export
 */
export const CategoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new sub categorie, if the parentId is specified and a new root categorie otherwise.
         * @summary Create category
         * @param {CreateCategoryRequest} createCategoryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCategory: async (createCategoryRequest: CreateCategoryRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'createCategoryRequest' is not null or undefined
            assertParamExists('createCategory', 'createCategoryRequest', createCategoryRequest)
            const localVarPath = `/v1/category`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCategoryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a category by ID. A category can only be deleted, if it has no products or categories, that reference it.
         * @summary Delete category by ID
         * @param {number} id Id of the category
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCategory: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteCategory', 'id', id)
            const localVarPath = `/v1/category/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all categories in a tree structure. The first level contains only the root categories, which contain all the other categories in their children.
         * @summary Find all categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCategories: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a single category
         * @summary Find category by ID
         * @param {number} id Id of the category
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategory: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getCategory', 'id', id)
            const localVarPath = `/v1/category/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a category. If the parent node gets changed all of the underlying categories will belong to that new parent category.   All the rules that apply when creating a new node, apply here aswell
         * @summary Update Category
         * @param {UpdateCategoryRequest} updateCategoryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCategory: async (updateCategoryRequest: UpdateCategoryRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateCategoryRequest' is not null or undefined
            assertParamExists('updateCategory', 'updateCategoryRequest', updateCategoryRequest)
            const localVarPath = `/v1/category`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateCategoryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CategoryApi - functional programming interface
 * @export
 */
export const CategoryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CategoryApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a new sub categorie, if the parentId is specified and a new root categorie otherwise.
         * @summary Create category
         * @param {CreateCategoryRequest} createCategoryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCategory(createCategoryRequest: CreateCategoryRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCategory(createCategoryRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes a category by ID. A category can only be deleted, if it has no products or categories, that reference it.
         * @summary Delete category by ID
         * @param {number} id Id of the category
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCategory(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCategory(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns all categories in a tree structure. The first level contains only the root categories, which contain all the other categories in their children.
         * @summary Find all categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllCategories(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CategoryResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllCategories(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a single category
         * @summary Find category by ID
         * @param {number} id Id of the category
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCategory(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCategory(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates a category. If the parent node gets changed all of the underlying categories will belong to that new parent category.   All the rules that apply when creating a new node, apply here aswell
         * @summary Update Category
         * @param {UpdateCategoryRequest} updateCategoryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCategory(updateCategoryRequest: UpdateCategoryRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCategory(updateCategoryRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CategoryApi - factory interface
 * @export
 */
export const CategoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CategoryApiFp(configuration)
    return {
        /**
         * Creates a new sub categorie, if the parentId is specified and a new root categorie otherwise.
         * @summary Create category
         * @param {CreateCategoryRequest} createCategoryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCategory(createCategoryRequest: CreateCategoryRequest, options?: any): AxiosPromise<void> {
            return localVarFp.createCategory(createCategoryRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a category by ID. A category can only be deleted, if it has no products or categories, that reference it.
         * @summary Delete category by ID
         * @param {number} id Id of the category
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCategory(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteCategory(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns all categories in a tree structure. The first level contains only the root categories, which contain all the other categories in their children.
         * @summary Find all categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCategories(options?: any): AxiosPromise<Array<CategoryResponse>> {
            return localVarFp.getAllCategories(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a single category
         * @summary Find category by ID
         * @param {number} id Id of the category
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategory(id: number, options?: any): AxiosPromise<CategoryResponse> {
            return localVarFp.getCategory(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a category. If the parent node gets changed all of the underlying categories will belong to that new parent category.   All the rules that apply when creating a new node, apply here aswell
         * @summary Update Category
         * @param {UpdateCategoryRequest} updateCategoryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCategory(updateCategoryRequest: UpdateCategoryRequest, options?: any): AxiosPromise<void> {
            return localVarFp.updateCategory(updateCategoryRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createCategory operation in CategoryApi.
 * @export
 * @interface CategoryApiCreateCategoryRequest
 */
export interface CategoryApiCreateCategoryRequest {
    /**
     * 
     * @type {CreateCategoryRequest}
     * @memberof CategoryApiCreateCategory
     */
    readonly createCategoryRequest: CreateCategoryRequest
}

/**
 * Request parameters for deleteCategory operation in CategoryApi.
 * @export
 * @interface CategoryApiDeleteCategoryRequest
 */
export interface CategoryApiDeleteCategoryRequest {
    /**
     * Id of the category
     * @type {number}
     * @memberof CategoryApiDeleteCategory
     */
    readonly id: number
}

/**
 * Request parameters for getCategory operation in CategoryApi.
 * @export
 * @interface CategoryApiGetCategoryRequest
 */
export interface CategoryApiGetCategoryRequest {
    /**
     * Id of the category
     * @type {number}
     * @memberof CategoryApiGetCategory
     */
    readonly id: number
}

/**
 * Request parameters for updateCategory operation in CategoryApi.
 * @export
 * @interface CategoryApiUpdateCategoryRequest
 */
export interface CategoryApiUpdateCategoryRequest {
    /**
     * 
     * @type {UpdateCategoryRequest}
     * @memberof CategoryApiUpdateCategory
     */
    readonly updateCategoryRequest: UpdateCategoryRequest
}

/**
 * CategoryApi - object-oriented interface
 * @export
 * @class CategoryApi
 * @extends {BaseAPI}
 */
export class CategoryApi extends BaseAPI {
    /**
     * Creates a new sub categorie, if the parentId is specified and a new root categorie otherwise.
     * @summary Create category
     * @param {CategoryApiCreateCategoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public createCategory(requestParameters: CategoryApiCreateCategoryRequest, options?: any) {
        return CategoryApiFp(this.configuration).createCategory(requestParameters.createCategoryRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a category by ID. A category can only be deleted, if it has no products or categories, that reference it.
     * @summary Delete category by ID
     * @param {CategoryApiDeleteCategoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public deleteCategory(requestParameters: CategoryApiDeleteCategoryRequest, options?: any) {
        return CategoryApiFp(this.configuration).deleteCategory(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns all categories in a tree structure. The first level contains only the root categories, which contain all the other categories in their children.
     * @summary Find all categories
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public getAllCategories(options?: any) {
        return CategoryApiFp(this.configuration).getAllCategories(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a single category
     * @summary Find category by ID
     * @param {CategoryApiGetCategoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public getCategory(requestParameters: CategoryApiGetCategoryRequest, options?: any) {
        return CategoryApiFp(this.configuration).getCategory(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a category. If the parent node gets changed all of the underlying categories will belong to that new parent category.   All the rules that apply when creating a new node, apply here aswell
     * @summary Update Category
     * @param {CategoryApiUpdateCategoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public updateCategory(requestParameters: CategoryApiUpdateCategoryRequest, options?: any) {
        return CategoryApiFp(this.configuration).updateCategory(requestParameters.updateCategoryRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductApi - axios parameter creator
 * @export
 */
export const ProductApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new product
         * @summary Create product
         * @param {CreateProductRequest} createProductRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProduct: async (createProductRequest: CreateProductRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'createProductRequest' is not null or undefined
            assertParamExists('createProduct', 'createProductRequest', createProductRequest)
            const localVarPath = `/v1/product`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createProductRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a single product
         * @summary Get product by ID
         * @param {number} id Id of the product
         * @param {string} [currency] Currency that the product should be returned in.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProduct: async (id: number, currency?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getProduct', 'id', id)
            const localVarPath = `/v1/product/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (currency !== undefined) {
                localVarQueryParameter['currency'] = currency;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a product
         * @summary Delete product
         * @param {number} id Id of the product
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProduct1: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getProduct1', 'id', id)
            const localVarPath = `/v1/product/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a product
         * @summary Update product
         * @param {UpdateProductRequest} updateProductRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductsByCategory: async (updateProductRequest: UpdateProductRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateProductRequest' is not null or undefined
            assertParamExists('getProductsByCategory', 'updateProductRequest', updateProductRequest)
            const localVarPath = `/v1/product`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateProductRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets all products and of a category and all products of its subcatgories
         * @summary Get products by category
         * @param {number} categoryId Id of the category
         * @param {string} [currency] Currency that the products should be returned in.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductsByCategory1: async (categoryId: number, currency?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('getProductsByCategory1', 'categoryId', categoryId)
            const localVarPath = `/v1/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (categoryId !== undefined) {
                localVarQueryParameter['categoryId'] = categoryId;
            }

            if (currency !== undefined) {
                localVarQueryParameter['currency'] = currency;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductApi - functional programming interface
 * @export
 */
export const ProductApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a new product
         * @summary Create product
         * @param {CreateProductRequest} createProductRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProduct(createProductRequest: CreateProductRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createProduct(createProductRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a single product
         * @summary Get product by ID
         * @param {number} id Id of the product
         * @param {string} [currency] Currency that the product should be returned in.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProduct(id: number, currency?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProduct(id, currency, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates a product
         * @summary Delete product
         * @param {number} id Id of the product
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProduct1(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProduct1(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates a product
         * @summary Update product
         * @param {UpdateProductRequest} updateProductRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductsByCategory(updateProductRequest: UpdateProductRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProductsByCategory(updateProductRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets all products and of a category and all products of its subcatgories
         * @summary Get products by category
         * @param {number} categoryId Id of the category
         * @param {string} [currency] Currency that the products should be returned in.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductsByCategory1(categoryId: number, currency?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Set<ProductResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProductsByCategory1(categoryId, currency, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductApi - factory interface
 * @export
 */
export const ProductApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductApiFp(configuration)
    return {
        /**
         * Creates a new product
         * @summary Create product
         * @param {CreateProductRequest} createProductRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProduct(createProductRequest: CreateProductRequest, options?: any): AxiosPromise<void> {
            return localVarFp.createProduct(createProductRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a single product
         * @summary Get product by ID
         * @param {number} id Id of the product
         * @param {string} [currency] Currency that the product should be returned in.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProduct(id: number, currency?: string, options?: any): AxiosPromise<ProductResponse> {
            return localVarFp.getProduct(id, currency, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a product
         * @summary Delete product
         * @param {number} id Id of the product
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProduct1(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.getProduct1(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a product
         * @summary Update product
         * @param {UpdateProductRequest} updateProductRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductsByCategory(updateProductRequest: UpdateProductRequest, options?: any): AxiosPromise<void> {
            return localVarFp.getProductsByCategory(updateProductRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets all products and of a category and all products of its subcatgories
         * @summary Get products by category
         * @param {number} categoryId Id of the category
         * @param {string} [currency] Currency that the products should be returned in.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductsByCategory1(categoryId: number, currency?: string, options?: any): AxiosPromise<Set<ProductResponse>> {
            return localVarFp.getProductsByCategory1(categoryId, currency, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createProduct operation in ProductApi.
 * @export
 * @interface ProductApiCreateProductRequest
 */
export interface ProductApiCreateProductRequest {
    /**
     * 
     * @type {CreateProductRequest}
     * @memberof ProductApiCreateProduct
     */
    readonly createProductRequest: CreateProductRequest
}

/**
 * Request parameters for getProduct operation in ProductApi.
 * @export
 * @interface ProductApiGetProductRequest
 */
export interface ProductApiGetProductRequest {
    /**
     * Id of the product
     * @type {number}
     * @memberof ProductApiGetProduct
     */
    readonly id: number

    /**
     * Currency that the product should be returned in.
     * @type {string}
     * @memberof ProductApiGetProduct
     */
    readonly currency?: string
}

/**
 * Request parameters for getProduct1 operation in ProductApi.
 * @export
 * @interface ProductApiGetProduct1Request
 */
export interface ProductApiGetProduct1Request {
    /**
     * Id of the product
     * @type {number}
     * @memberof ProductApiGetProduct1
     */
    readonly id: number
}

/**
 * Request parameters for getProductsByCategory operation in ProductApi.
 * @export
 * @interface ProductApiGetProductsByCategoryRequest
 */
export interface ProductApiGetProductsByCategoryRequest {
    /**
     * 
     * @type {UpdateProductRequest}
     * @memberof ProductApiGetProductsByCategory
     */
    readonly updateProductRequest: UpdateProductRequest
}

/**
 * Request parameters for getProductsByCategory1 operation in ProductApi.
 * @export
 * @interface ProductApiGetProductsByCategory1Request
 */
export interface ProductApiGetProductsByCategory1Request {
    /**
     * Id of the category
     * @type {number}
     * @memberof ProductApiGetProductsByCategory1
     */
    readonly categoryId: number

    /**
     * Currency that the products should be returned in.
     * @type {string}
     * @memberof ProductApiGetProductsByCategory1
     */
    readonly currency?: string
}

/**
 * ProductApi - object-oriented interface
 * @export
 * @class ProductApi
 * @extends {BaseAPI}
 */
export class ProductApi extends BaseAPI {
    /**
     * Creates a new product
     * @summary Create product
     * @param {ProductApiCreateProductRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public createProduct(requestParameters: ProductApiCreateProductRequest, options?: any) {
        return ProductApiFp(this.configuration).createProduct(requestParameters.createProductRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a single product
     * @summary Get product by ID
     * @param {ProductApiGetProductRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public getProduct(requestParameters: ProductApiGetProductRequest, options?: any) {
        return ProductApiFp(this.configuration).getProduct(requestParameters.id, requestParameters.currency, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a product
     * @summary Delete product
     * @param {ProductApiGetProduct1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public getProduct1(requestParameters: ProductApiGetProduct1Request, options?: any) {
        return ProductApiFp(this.configuration).getProduct1(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a product
     * @summary Update product
     * @param {ProductApiGetProductsByCategoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public getProductsByCategory(requestParameters: ProductApiGetProductsByCategoryRequest, options?: any) {
        return ProductApiFp(this.configuration).getProductsByCategory(requestParameters.updateProductRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets all products and of a category and all products of its subcatgories
     * @summary Get products by category
     * @param {ProductApiGetProductsByCategory1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public getProductsByCategory1(requestParameters: ProductApiGetProductsByCategory1Request, options?: any) {
        return ProductApiFp(this.configuration).getProductsByCategory1(requestParameters.categoryId, requestParameters.currency, options).then((request) => request(this.axios, this.basePath));
    }
}


